/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import java.awt.*;


public class Canvas extends javax.swing.JPanel {

    private static int nodeSize = 7;
    private static double edgeSize = 0.7;

    
    /**
     * Creates new form Canvas2
     */
    public Canvas() {
        initComponents();

    }
     /*
    private void drawMesh(Graphics g, double scale) {
        int countX = (int)(this.getWidth() / (scale * 10.0));
        int countY = (int)(this.getHeight()/ (scale * 10.0));
        
        g.setColor(Color.BLACK);
        for (int x = 0; x <= countX; ++x) {
            g.drawLine((int)(x * 10 * scale), 0, (int)(x * 10 * scale), this.getHeight());
        }
        for (int y = 0; y <= countY; ++y) {
            g.drawLine(0, (int)(y * 10 * scale), this.getWidth(), (int)(y * 10 * scale));
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        double scaleY = (double)this.getHeight() / (double)this.mapSizeY;
        // mriezka
        this.drawMesh(g, scaleY);
        
        // cesty
        if (this.edges != null) {
            g.setColor(Color.BLACK);
            ((Graphics2D)g).setStroke(new BasicStroke((int)(Canvas.edgeSize * scaleY)));
            for (Edge edge : this.edges) {
                double x1 = edge.getNodeFrom().getX();
                double y1 = edge.getNodeFrom().getY();
                double x2 = edge.getNodeTo().getX();
                double y2 = edge.getNodeTo().getY();
                g.drawLine((int)(x1 * scaleY), this.getHeight() - (int)(y1 * scaleY), (int)(x2 * scaleY), this.getHeight() - (int)(y2 * scaleY));
            }
        }
        
        // vrcholy
        if (this.nodes != null) {
            g.setColor(Color.GRAY);
            for (Node node : this.nodes) {
                g.fillOval((int)((node.getX() - Canvas.nodeSize / 2.0) * scaleY), this.getHeight() - (int)((node.getY() + Canvas.nodeSize / 2.0) * scaleY), (int)(Canvas.nodeSize * scaleY), (int)(Canvas.nodeSize * scaleY));
            }
        }
    }
*/
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
